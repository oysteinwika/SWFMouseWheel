/** * SWFMouseWheel * ExternalInterface for transmitting native mousewheel events via DOM * * @author		Øystein Wika * @version		1.0 *//*Licensed under the MIT LicenseCopyright (c) 2006-2009, Øystein WikaPermission is hereby granted, free of charge, to any person obtaining a copy ofthis software and associated documentation files (the "Software"), to deal inthe Software without restriction, including without limitation the rights touse, copy, modify, merge, publish, distribute, sublicense, and/or sell copies ofthe Software, and to permit persons to whom the Software is furnished to do so,subject to the following conditions:The above copyright notice and this permission notice shall be included in allcopies or substantial portions of the Software.THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS ORIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESSFOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS ORCOPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHERIN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR INCONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.https://github.com/oysteinwika/SWFMouseWheel*/package com.oysteinwika.swfmousewheel {    import flash.display.Sprite;    import flash.display.Stage;    import flash.events.MouseEvent;    import flash.events.TimerEvent;    import flash.external.ExternalInterface;    import flash.utils.Timer;			/**	* SWFMouseWheel for transmitting native mousewheel events via DOM	*	* @langversion ActionScript 3.0	* @playerversion Flash 9	* @author Øystein Wika 12/09/2007	*	* @see flash.external.ExternalInterface	*/	public class SWFMouseWheel extends Sprite {									private static var instance:SWFMouseWheel = new SWFMouseWheel();		public static var _stage:Stage;		public static var _target:Object;				public function SWFMouseWheel()		{			if( instance ) throw new Error( "SWFMouseWheel can only be accessed through SWFMouseWheel.getInstance()" );			init();		}				public static function getInstance(stage:Stage):SWFMouseWheel {			_stage = stage;			_target = _stage;			_stage.addEventListener(MouseEvent.MOUSE_MOVE, getMouseTarget);			return instance;		}						private function init():void {			/**			* Set up ExternalInterface			*/												if (ExternalInterface.available) {				try {										ExternalInterface.addCallback("jsdelta", swfMouseWheelHandler);					if (checkJavaScriptReady()) {					} else {						// JavaScript not ready yet, creating timer						var readyTimer:Timer = new Timer(100, 10);						readyTimer.addEventListener(TimerEvent.TIMER, timerHandler);						readyTimer.start();					}				} catch (error:SecurityError) {				} catch (error:Error) {				}			} else {			}		}		/**		* Functions needed by ExternalInterface		*/		private function receivedFromJavaScript(value:String):void {		}		private function checkJavaScriptReady():Boolean {			var isReady:Boolean = Boolean(ExternalInterface.call("isReady"));			return isReady;		}		private function timerHandler(event:TimerEvent):void {			var isReady:Boolean = checkJavaScriptReady();			if (isReady) {				// ExternalInterface ready				Timer(event.target).stop();			}		}						/**		 * Get the current MOUSE_OVER target object		 */		public static function getMouseTarget(evt:MouseEvent):void		{			_target = evt.target;		}				/**		 * Dispatch a SWFMouseWheelEvent on target		 */		private function swfMouseWheelHandler( delta:int ):void {			_target.dispatchEvent(new SWFMouseWheelEvent(SWFMouseWheelEvent.SWF_MOUSE_WHEEL_EVENT, true, false, delta));		}							}}